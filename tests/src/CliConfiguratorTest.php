<?php

declare(strict_types=1);

namespace Fabiang\DoctrineMigrationsLiquibase;

use PHPUnit\Framework\TestCase;
use Prophecy\PhpUnit\ProphecyTrait;
use Prophecy\Prophecy\ObjectProphecy;
use Prophecy\Argument;
use Interop\Container\ContainerInterface;
use Symfony\Component\Console\Application;
use Symfony\Component\Console\Command\Command;
use Symfony\Component\Console\Input\InputDefinition;
use Symfony\Component\Console\Input\InputOption;

/**
 * Generated by PHPUnit_SkeletonGenerator on 2021-09-20 at 13:06:46.
 *
 * @coversDefaultClass Fabiang\DoctrineMigrationsLiquibase\CliConfigurator
 */
final class CliConfiguratorTest extends TestCase
{

    use ProphecyTrait;

    private CliConfigurator $object;
    private ObjectProphecy $container;

    /**
     * Sets up the fixture, for example, opens a network connection.
     * This method is called before a test is executed.
     */
    protected function setUp(): void
    {
        $this->container = $this->prophesize(ContainerInterface::class);
        $this->object    = new CliConfigurator($this->container->reveal());
    }

    /**
     * @test
     * @covers ::configure#
     * @covers ::createObjectManagerInputOption
     */
    public function configure(): void
    {
        $app = $this->prophesize(Application::class);

        $inputOption = $this->prophesize(InputDefinition::class);
        $inputOption->addOption(Argument::type(InputOption::class))
            ->shouldBeCalledTimes(2);

        $cmd1 = $this->prophesize(Command::class);
        $cmd1->getDefinition()->willReturn($inputOption->reveal());
        $cmd2 = $this->prophesize(Command::class);
        $cmd2->getDefinition()->willReturn($inputOption->reveal());

        $this->container->get('doctrine.liquibase.createchangelog')
            ->shouldBeCalled()
            ->willReturn($cmd1->reveal());

        $this->container->get('doctrine.liquibase.creatediff')
            ->shouldBeCalled()
            ->willReturn($cmd1->reveal());

        $app->add(Argument::type(Command::class))->shouldBeCalledTimes(2);

        $this->object->configure($app->reveal());
    }

}
